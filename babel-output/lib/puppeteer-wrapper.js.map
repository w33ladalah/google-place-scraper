{"version":3,"sources":["../../src/lib/puppeteer-wrapper.js"],"names":["PuppeteerWrapper","constructor","logger","filePaths","options","_logger","_filePaths","_options","headless","chromePath","undefined","browser","setup","isChromePathSet","_setChromePath","args","width","push","height","logInfo","puppeteer","launch","executablePath","cleanup","close","newPage","page","setUserAgent","_client","send","_getSavedPath","console","log","fs","existsSync","logError","_getDefaultOsPath","settingsPath","Promise","resolve","reject","readFile","err","fileContent","process","platform"],"mappings":"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","file":"puppeteer-wrapper.js","sourcesContent":["import puppeteer from 'puppeteer-core';\nimport fs from 'fs';\n\n\n/**\n * chromePath:  the path of the chrome executable in our pc\n * setup() :    initialize Puppeteer\n * cleanup():   clearnup Puppeteer\n * browser:     global Puppeteer browser instance\n * newPage():   get new page with default user agent and dimensions\n */\n\n /**\n  * options: {headless, width, height}\n  */\nexport class PuppeteerWrapper {\n    constructor(logger, filePaths, options) {\n        this._logger = logger;\n        this._filePaths = filePaths;\n        this._options = options || { headless: true };\n\n        // Public\n        this.chromePath = undefined;\n        this.browser = undefined;\n    }\n\n    //#region Public API setup - cleanup\n\n    async setup() {\n        const isChromePathSet = await this._setChromePath();\n        if (!isChromePathSet) {\n            return false;\n        }\n\n        const args = [];\n        if (this._options.width) {\n            args.push(`--window-size=${this._options.width},${this._options.height}`);\n        }\n\n        this._logger.logInfo(\"Setting up puppeteer...\");\n        this.browser = await puppeteer.launch({\n            headless: this._options.headless,\n            executablePath: this.chromePath,\n            args\n        });\n        this._logger.logInfo(\"Puppeteer initialized\");\n        return true;\n    }\n\n    async cleanup() {\n        if (this.browser) await this.browser.close();\n    }\n\n    async newPage() {\n        await this.cleanup();\n        await this.setup();\n\n        const page = await this.browser.newPage();\n\n        page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36');\n\n        if (this._options.width) {\n            await page._client.send('Emulation.clearDeviceMetricsOverride');\n        }\n        return page;\n    }\n\n    //#endregion\n\n    //#region Helpers\n\n    async _setChromePath() {\n        this.chromePath = await this._getSavedPath();\n        console.log(this.chromePath);\n        if (this.chromePath) {\n            if (fs.existsSync(this.chromePath)) return true;\n\n            // The saved path does not exists\n            this._logger.logError(`Saved Chrome path does not exists: ${this.chromePath}`);\n        }\n\n        // Try the default path\n        this.chromePath = this._getDefaultOsPath();\n        if (!fs.existsSync(this.chromePath)) {\n            this._logger.logError(`Default chrome path does not exists: ${this.chromePath}`);\n            this._logger.logError(`Try to set chrome path in settings file: ${this._filePaths.settingsPath()}`);\n            return false;\n        }\n\n        return true;\n    }\n\n    _getSavedPath() {\n        const settingsPath = this._filePaths.settingsPath();\n\n        return new Promise((resolve, reject) => {\n            if (!fs.existsSync(settingsPath)) {\n                resolve(undefined);\n                return;\n            }\n            fs.readFile(settingsPath, \"utf8\", (err, fileContent) => {\n                if (err) {\n                    this._logger.logError(err);\n                    reject();\n                    return;\n                }\n\n                resolve(fileContent);\n            });\n        })\n    }\n\n    _getDefaultOsPath() {\n        if (process.platform === \"win32\") {\n            return [\n                'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\n                'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\n            ];\n        } else {\n            return '/usr/bin/google-chrome';\n        }\n    }\n\n    //#endregion\n}\n"]}